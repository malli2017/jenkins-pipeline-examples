pipeline {
    // Agent label to be used in this pipeline
    agent label: 'master'

    // Environment variables
    environment {
        ANDROID_HOME = '/opt/android-sdk/'
    }

    // Pipeline stages
    stages {
        // First stage: get the source code from git
        stage('Checkout code') {
            steps {
                // I am using git explicitly but you can run "checkout scm"
                git url: 'git1@git.digio.es:app_and_bizkaia',
                    branch: 'develop'
            }
        }

        // Second stage: run the Android app tests
        stage('Run tests') {
            steps {
                // First step of this stage
                sh 'chmod +x gradlew'

                // Second step, in this case I am running a groovy script!
                // I want junit to run both in case all tests pass or not
                script {
                    try {
                        sh './gradlew clean test --continue'
                    } catch(err) {
                        throw err
                    } finally {
                        junit 'app/build/test-results/debug/TEST-*.xml'
                    }
                }
            }
        }

        // Third stage: build de app
        stage('Build app') {
            steps {
                sh './gradlew clean assemble'
            }
        }
    }

    // Run after all stages success
    post {
        aborted {
            notifyBuild('ABORTED')
        }

        success {
            // Archive all generated APK as artifacts
            archive 'app/build/outputs/apk/*.apk'
            notifyBuild('SUCCESSFUL')
        }

        unstable {
            notifyBuild('UNSTABLE')
        }

        failure {
            notifyBuild('FAILURE')
        }
    }
}

// External functions
def notifyBuild(String buildStatus = 'STARTED') {
    // build status of null means successful
    buildStatus =  buildStatus ?: 'SUCCESSFUL'

    // Default values
    def colorName = 'RED'
    def colorCode = '#FF0000'
    def subject = "${buildStatus}: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]'"
    def summary = "${subject} (${env.BUILD_URL})"
    def details = """<p>STARTED: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]':</p>
        <p>Check console output at &QUOT;<a href='${env.BUILD_URL}'>${env.JOB_NAME} [${env.BUILD_NUMBER}]</a>&QUOT;</p>"""

    // Override default values based on build status
    if (buildStatus == 'STARTED') {
        color = 'YELLOW'
        colorCode = '#FFFF00'
    } else if (buildStatus == 'SUCCESSFUL') {
        color = 'GREEN'
        colorCode = '#00FF00'
    } else {
        color = 'RED'
        colorCode = '#FF0000'
    }

    // Send notifications
    slackSend (color: colorCode, message: summary)
}
